/**
 * Test program to demonstrate fscanf buffer overflow vulnerability
 * Compile: g++ -o test_fscanf test_fscanf_vulnerability.cpp
 * 
 * WARNING: This program intentionally contains vulnerabilities for demonstration
 */

#include <cstdio>
#include <cstring>
#include <iostream>

void vulnerable_fscanf() {
    char buffer[16];  // Small buffer
    char guard1[16] = "GUARD1GUARD1";
    char guard2[16] = "GUARD2GUARD2";
    
    printf("=== Vulnerable fscanf Test ===\n");
    printf("Buffer address: %p\n", (void*)buffer);
    printf("Guard1 address: %p (contains: %s)\n", (void*)guard1, guard1);
    printf("Guard2 address: %p (contains: %s)\n", (void*)guard2, guard2);
    
    // Create a test file with oversized input
    FILE* f = fopen("test_input.txt", "w");
    fprintf(f, "ThisIsAVeryLongStringThatWillOverflowTheBufferAAAAAAAAAAAAAAAAAAAA\n");
    fclose(f);
    
    // Vulnerable read
    f = fopen("test_input.txt", "r");
    printf("\nReading with vulnerable fscanf(f, \"%%s\", buffer)...\n");
    fscanf(f, "%s", buffer);  // VULNERABLE!
    fclose(f);
    
    printf("\nAfter vulnerable read:\n");
    printf("Buffer contains: %s\n", buffer);
    printf("Guard1 now contains: %s\n", guard1);
    printf("Guard2 now contains: %s\n", guard2);
    
    if (strcmp(guard1, "GUARD1GUARD1") != 0) {
        printf("\n*** BUFFER OVERFLOW DETECTED! Guard1 was overwritten! ***\n");
    }
}

void safe_fscanf() {
    char buffer[16];
    char guard1[16] = "GUARD1GUARD1";
    char guard2[16] = "GUARD2GUARD2";
    
    printf("\n\n=== Safe fscanf Test ===\n");
    printf("Buffer address: %p\n", (void*)buffer);
    printf("Guard1 address: %p (contains: %s)\n", (void*)guard1, guard1);
    printf("Guard2 address: %p (contains: %s)\n", (void*)guard2, guard2);
    
    // Safe read with field width
    FILE* f = fopen("test_input.txt", "r");
    printf("\nReading with safe fscanf(f, \"%%15s\", buffer)...\n");
    fscanf(f, "%15s", buffer);  // SAFE: Limited to 15 chars + null
    fclose(f);
    
    printf("\nAfter safe read:\n");
    printf("Buffer contains: %s (length: %zu)\n", buffer, strlen(buffer));
    printf("Guard1 still contains: %s\n", guard1);
    printf("Guard2 still contains: %s\n", guard2);
    
    if (strcmp(guard1, "GUARD1GUARD1") == 0) {
        printf("\n*** Guards intact - no buffer overflow! ***\n");
    }
}

int main() {
    printf("fscanf Buffer Overflow Demonstration\n");
    printf("====================================\n\n");
    
    // WARNING: The vulnerable test may crash the program!
    // Comment out if you want to skip to the safe version
    vulnerable_fscanf();
    
    safe_fscanf();
    
    // Cleanup
    remove("test_input.txt");
    
    return 0;
}