#!/bin/sh
## File:     ode_robots-config for libode_robots
## Author:   Georg Martius
## Date:     22.10.2013


define(`COMMENT', )
COMMENT(`There are defines for platform dependend stuff.
         DEV only produces output in the development version
         DEVORUSER  choice between development (first argument) or user (second)
         LINUXORMAC outputs the first argument on linux and the second on mac.
         GSL outputs the first argument of GSL is used or second if not
         Call the m4 processor with -D PREFIX=... -D SRCPREFIX=...
                                    -D MAC|LINUX -D DEVEL|USER -D VERSION=...
         The SRCPREFIX is only requried for DEVEL
         ')
COMMENT(`Comment for processed file:')

# Do not edit, this is file generated by m4 from ode_robots-config.m4

ifdef(`DEVEL',
`define(`DEVORUSER', $1) define(`DEV', $1)'
,
`define(`DEVORUSER', $2) define(`DEV',)'
)
ifdef(`MAC',
`define(`LINUXORMAC', $2)'
,
`define(`LINUXORMAC', $1)'
)
ifdef(`MAC_ARM64',
`define(`LINUXORMAC', $2) define(`ARM64FLAGS', `-arch arm64')',
`define(`ARM64FLAGS', `')'
)
COMMENT(`change quote syntax to [[string]]')
changequote([[,]])

prefix="PREFIX"
srcprefix="SRCPREFIX"
intern=
type=DEVORUSER([[[[DEVEL]]]],[[[[USER]]]])
rpath=DEVORUSER([[-Wl,-rpath,$srcprefix]],[[-Wl,-rpath,$prefix/lib]])

LIBBASE=ode_robots

if type ode-dbl-config >/dev/null 2>&1; then
    # Convert -I flags to -isystem to suppress warnings from ODE headers
    ODEFLAGS=`ode-dbl-config --cflags | sed -E 's/-I([^ ]*\/homebrew[^ ]*)/-isystem \1/g; s/-I([^ ]*\/Cellar[^ ]*)/-isystem \1/g'`
else #Todo print error to stderr
    echo "Error: ode-dbl-config not found" 1>&2
    exit 1;
fi

## use -pg for profiling
COMMENT(`Use environment variable LPZROBOTS_INCLUDE_PATH if set, otherwise use common macOS paths')
# Handle X11 includes with -isystem if it's under /opt
X11_INCLUDES="-I/usr/X11R6/include"
if [ -d "/opt/X11/include" ]; then
    X11_INCLUDES="-isystem /opt/X11/include"
fi
CBASEFLAGS="-pthread -std=c++17 -Wno-write-strings ARM64FLAGS -DGL_SILENCE_DEPRECATION $X11_INCLUDES $ODEFLAGS"
ifdef([[MAC]],
  [[EXTRA_INCLUDES=""
  if [ -n "$LPZROBOTS_INCLUDE_PATH" ]; then
    EXTRA_INCLUDES="-I$LPZROBOTS_INCLUDE_PATH"
  else
    # Check for common macOS package manager paths
    # Use -isystem instead of -I to suppress warnings from external libraries
    if [ -d "/opt/homebrew/include" ]; then
      EXTRA_INCLUDES="$EXTRA_INCLUDES -isystem /opt/homebrew/include"
    fi
    if [ -d "/opt/local/include" ]; then
      EXTRA_INCLUDES="$EXTRA_INCLUDES -isystem /opt/local/include"
    fi
    if [ -d "/usr/local/include" ]; then
      EXTRA_INCLUDES="$EXTRA_INCLUDES -isystem /usr/local/include"
    fi
  fi
  CBASEFLAGS="$CBASEFLAGS $EXTRA_INCLUDES"]]
)
CPPFLAGS="$CBASEFLAGS"
INTERNFLAGS="-g -O"

# ---------- choose GLUT flags per platform ----------
case `uname` in
  Darwin)
      GLUT_FLAGS="-framework GLUT -framework OpenGL" ;;
  *)
      GLUT_FLAGS="-lglut" ;;
esac

LIBS="-lm -losgShadow -losgText -losgUtil -losgViewer -losgGA -losgDB \
      -lOpenThreads -losg -lGL -lGLU ${GLUT_FLAGS} -lpthread"

usage="\
Usage: ode_robots-config [--prefix[=DIR]] [--srcprefix[=DIR]] [--version] [--intern] [--static] [--opt|--dbg] [--cflags] [--libs] [--libfile] [--solibfile] [--type]"

if test $# -eq 0; then
      echo "${usage}" 1>&2
      exit 1
fi

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) optarg= ;;
  esac

  case $1 in
    --type)
      echo $type
      exit 0
      ;;
    --prefix=*)
      prefix=$optarg
      ;;
    --prefix)
      echo $prefix
      ;;
    --srcprefix=*)
      srcprefix=$optarg
      ;;
    --srcprefix)
      echo $srcprefix
      ;;
    --version)
      echo VERSION
      ;;
    --intern) ##for internal use when compiling the lib
      intern=1
      ;;
    --static) ##force use static linking of lib
      LINUXORMAC([[STATICSTART=-Wl,-Bstatic
      STATICEND=-Wl,-Bdynamic]],[[STATICSTART=
      STATICEND=]])
      rpath=""
      USE_STATIC_LIBS=1
    ;;
    --opt) ##Optimisation
      LIBBASE=${LIBBASE}_opt
      CPPFLAGS="$CBASEFLAGS -DNDEBUG"
      INTERNFLAGS="-O3"
      ;;
    --dbg) ## DEBUG
      LIBBASE=${LIBBASE}_dbg
      CPPFLAGS="$CBASEFLAGS"
      INTERNFLAGS="-g"
      ;;
    --cflags)
      if [ -z "$intern" ]; then INTERNFLAGS=; fi
      echo $CPPFLAGS DEVORUSER(-I"$srcprefix/include" -I"$srcprefix/include/ode_robots",-I"$prefix/include" -I"$prefix/include/ode_robots") $INTERNFLAGS
      ;;
    --libs)
      COMMENT(`On macOS with --static, use explicit .a file paths instead of -l flags')
      if [ -n "$USE_STATIC_LIBS" ] && [ `uname` = "Darwin" ]; then
        echo DEVORUSER("$srcprefix/lib${LIBBASE}.a","$prefix/lib/lib${LIBBASE}.a") $LIBS `ode-dbl-config --libs`
      else
        echo DEVORUSER(-L"$srcprefix/",-L"$prefix/lib") $rpath $STATICSTART -l$LIBBASE $STATICEND $LIBS `ode-dbl-config --libs`
      fi
      ;;
    --libfile)
      echo "$srcprefix/lib${LIBBASE}.a"
      ;;
    --solibfile)
      echo "$srcprefix/lib${LIBBASE}.so"
      ;;
    *)
      echo "Syntax Error: $0 $@" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
  esac
  shift
done
