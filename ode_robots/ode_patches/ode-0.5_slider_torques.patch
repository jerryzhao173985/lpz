diff -Naur ode-0.5/ode/src/joint.cpp ode-0.5.2/ode/src/joint.cpp
--- ode-0.5/ode/src/joint.cpp	2004-05-18 20:08:04.000000000 +0200
+++ ode-0.5.2/ode/src/joint.cpp	2005-09-19 16:08:56.000000000 +0200
@@ -1060,10 +1060,10 @@
   if (joint->node[1].body) {
     dVector3 tmp;
     dCROSS (tmp, = REAL(0.5) * ,c,p);
-    for (i=0; i<3; i++) info->J2a[s3+i] = tmp[i];
+    for (i=0; i<3; i++) info->J1a[s3+i] = tmp[i];
     for (i=0; i<3; i++) info->J2a[s3+i] = tmp[i];
     dCROSS (tmp, = REAL(0.5) * ,c,q);
-    for (i=0; i<3; i++) info->J2a[s4+i] = tmp[i];
+    for (i=0; i<3; i++) info->J1a[s4+i] = tmp[i];
     for (i=0; i<3; i++) info->J2a[s4+i] = tmp[i];
     for (i=0; i<3; i++) info->J2l[s3+i] = -p[i];
     for (i=0; i<3; i++) info->J2l[s4+i] = -q[i];
@@ -1163,6 +1163,23 @@
     dBodyAddForce (joint->node[0].body,axis[0],axis[1],axis[2]);
   if (joint->node[1].body != 0)
     dBodyAddForce(joint->node[1].body, -axis[0], -axis[1], -axis[2]);
+
+  if (joint->node[0].body != 0 && joint->node[1].body != 0) {
+    // linear torque decoupling:
+    // we have to compensate the torque, that his slider force may generate
+	// if body centers are not aligned along the slider axis
+  
+    dVector3 ltd; // Linear Torque Decoupling vector (a torque)
+  
+    dVector3 c;  
+    c[0]=REAL(0.5)*(joint->node[1].body->pos[0]-joint->node[0].body->pos[0]);
+    c[1]=REAL(0.5)*(joint->node[1].body->pos[1]-joint->node[0].body->pos[1]);
+    c[2]=REAL(0.5)*(joint->node[1].body->pos[2]-joint->node[0].body->pos[2]);
+    dCROSS (ltd,=,c,axis);
+
+    dBodyAddTorque (joint->node[0].body,ltd[0],ltd[1], ltd[2]);
+    dBodyAddTorque (joint->node[1].body,ltd[0],ltd[1], ltd[2]);
+  }
 }
 
 
