diff -Naur ode-0.5/include/ode/common.h ode-0.5_lmotor/include/ode/common.h
--- ode-0.5/include/ode/common.h	2004-05-06 21:02:22.000000000 +0000
+++ ode-0.5_lmotor/include/ode/common.h	2005-08-11 09:09:33.000000000 +0000
@@ -206,7 +206,8 @@
   dJointTypeHinge2,
   dJointTypeFixed,
   dJointTypeNull,
-  dJointTypeAMotor
+  dJointTypeAMotor,
+  dJointTypeLMotor
 };
 
 
diff -Naur ode-0.5/include/ode/objects.h ode-0.5_lmotor/include/ode/objects.h
--- ode-0.5/include/ode/objects.h	2004-05-18 18:07:47.000000000 +0000
+++ ode-0.5_lmotor/include/ode/objects.h	2005-08-11 09:09:41.000000000 +0000
@@ -173,6 +173,7 @@
 dJointID dJointCreateFixed (dWorldID, dJointGroupID);
 dJointID dJointCreateNull (dWorldID, dJointGroupID);
 dJointID dJointCreateAMotor (dWorldID, dJointGroupID);
+dJointID dJointCreateLMotor (dWorldID, dJointGroupID);
 
 void dJointDestroy (dJointID);
 
@@ -216,6 +217,11 @@
 void dJointSetAMotorMode (dJointID, int mode);
 void dJointAddAMotorTorques (dJointID, dReal torque1, dReal torque2, dReal torque3);
 
+void dJointSetLMotorNumAxes (dJointID, int num);
+void dJointSetLMotorAxis (dJointID, int anum, int rel,
+			  dReal x, dReal y, dReal z);
+void dJointSetLMotorParam (dJointID, int parameter, dReal value);
+
 void dJointGetBallAnchor (dJointID, dVector3 result);
 void dJointGetBallAnchor2 (dJointID, dVector3 result);
 void dJointGetHingeAnchor (dJointID, dVector3 result);
@@ -252,6 +258,9 @@
 dReal dJointGetAMotorAngleRate (dJointID, int anum);
 dReal dJointGetAMotorParam (dJointID, int parameter);
 int dJointGetAMotorMode (dJointID);
+int dJointGetLMotorNumAxes (dJointID);
+void dJointGetLMotorAxis (dJointID, int anum, dVector3 result);
+dReal dJointGetLMotorParam (dJointID, int parameter);
 
 int dAreConnected (dBodyID, dBodyID);
 int dAreConnectedExcluding (dBodyID, dBodyID, int joint_type);
diff -Naur ode-0.5/include/ode/odecpp.h ode-0.5_lmotor/include/ode/odecpp.h
--- ode-0.5/include/ode/odecpp.h	2004-04-22 20:42:09.000000000 +0000
+++ ode-0.5_lmotor/include/ode/odecpp.h	2005-08-11 09:09:47.000000000 +0000
@@ -617,5 +617,37 @@
 };
 
 
+class dLMotorJoint : public dJoint {
+  // intentionally undefined, don't use these
+  dLMotorJoint (const dLMotorJoint &);
+  void operator = (const dLMotorJoint &);
+
+public:
+  dLMotorJoint() { }
+  dLMotorJoint (dWorldID world, dJointGroupID group=0)
+    { _id = dJointCreateLMotor (world, group); }
+
+  void create (dWorldID world, dJointGroupID group=0) {
+    if (_id) dJointDestroy (_id);
+    _id = dJointCreateLMotor (world, group);
+  }
+
+  void setNumAxes (int num)
+    { dJointSetLMotorNumAxes (_id, num); }
+  int getNumAxes() const
+    { return dJointGetLMotorNumAxes (_id); }
+
+  void setAxis (int anum, int rel, dReal x, dReal y, dReal z)
+    { dJointSetLMotorAxis (_id, anum, rel, x, y, z); }
+  void getAxis (int anum, dVector3 result) const
+    { dJointGetLMotorAxis (_id, anum, result); }
+
+  void setParam (int parameter, dReal value)
+    { dJointSetLMotorParam (_id, parameter, value); }
+  dReal getParam (int parameter) const
+    { return dJointGetLMotorParam (_id, parameter); }
+};
+
+
 #endif
 #endif
diff -Naur ode-0.5/ode/doc/ode.doc ode-0.5_lmotor/ode/doc/ode.doc
--- ode-0.5/ode/doc/ode.doc	2004-05-29 19:10:05.000000000 +0000
+++ ode-0.5_lmotor/ode/doc/ode.doc	2005-08-11 09:09:51.000000000 +0000
@@ -1274,6 +1274,7 @@
 dJointID dJointCreateHinge2 (dWorldID, dJointGroupID);
 dJointID dJointCreateFixed (dWorldID, dJointGroupID);
 dJointID dJointCreateAMotor (dWorldID, dJointGroupID);
+dJointID dJointCreateLMotor (dWorldID, dJointGroupID);
 }{
 Create a new joint of a given type.
 The joint is initially in "limbo" (i.e. it has no effect on the simulation)
@@ -1357,6 +1358,7 @@
 @constdef{dJointTypeHinge2}{A hinge-2 joint.}
 @constdef{dJointTypeFixed}{A fixed joint.}
 @constdef{dJointTypeAMotor}{An angular motor joint.}
+@constdef{dJointTypeLMotor}{An linear motor joint.}
 }
 
 
@@ -2032,6 +2034,40 @@
 In @c{dAMotorEuler} mode this is the corresponding euler angle rate.
 }
 
+@subsection{Linear Motor}
+
+An linear motor (LMotor) allows the relative linear velocities of two
+bodies to be controlled.
+
+
+@funcdef{
+void dJointSetLMotorNumAxes (dJointID, int num);
+int dJointGetLMotorNumAxes (dJointID);
+}{
+Set (and get) the number of axes that will be controlled by the
+LMotor.
+The argument @arg{num} can range from 0 (which effectively deactivates the
+joint) to 3.
+
+}
+
+@funcdef{
+void dJointSetLMotorAxis (dJointID, int anum, int rel,
+			  dReal x, dReal y, dReal z);
+void dJointGetLMotorAxis (dJointID, int anum, dVector3 result);
+}{
+Set (and get) the AMotor axes.
+The @arg{anum} argument selects the axis to change (0,1 or 2).
+Each axis can have one of three ``relative orientation'' modes, selected by
+@arg{rel}:
+@list{
+@* 0: The axis is anchored to the global frame.
+@* 1: The axis is anchored to the first body.
+@* 2: The axis is anchored to the second body.
+}
+The axis vector (@arg{x},@arg{y},@arg{z}) is always specified in global
+coordinates regardless of the setting of @arg{rel}.
+}
 
 @section{General}
 
diff -Naur ode-0.5/ode/src/export-dif.cpp ode-0.5_lmotor/ode/src/export-dif.cpp
--- ode-0.5/ode/src/export-dif.cpp	2004-04-30 20:13:08.000000000 +0000
+++ ode-0.5_lmotor/ode/src/export-dif.cpp	2005-08-11 09:09:58.000000000 +0000
@@ -187,6 +187,7 @@
 		case dJointTypeFixed: return "fixed";
 		case dJointTypeNull: return "null";
 		case dJointTypeAMotor: return "ODE_angular_motor";
+		case dJointTypeLMotor: return "ODE_linear_motor";
 	}
 	return "unknown";
 }
@@ -288,6 +289,18 @@
 }
 
 
+static void printLMotor (PrintingContext &c, dxJoint *j)
+{
+	dxJointLMotor *a = (dxJointLMotor*) j;
+	c.print("num", a->num);
+	c.printIndent();
+	fprintf (c.file,"rel = {%d,%d,%d},\n",a->rel[0],a->rel[1],a->rel[2]);
+	c.print ("axis1",a->axis[0]);
+	c.print ("axis2",a->axis[1]);
+	c.print ("axis3",a->axis[2]);
+	for (int i=0; i<3; i++) printLimot (c,a->limot[i],i+1);
+}
+
 static void printAMotor (PrintingContext &c, dxJoint *j)
 {
 	dxJointAMotor *a = (dxJointAMotor*) j;
@@ -525,6 +538,7 @@
 			case dJointTypeHinge2: printHinge2 (c,j); break;
 			case dJointTypeFixed: printFixed (c,j); break;
 			case dJointTypeAMotor: printAMotor (c,j); break;
+			case dJointTypeLMotor: printLMotor (c,j); break;
 		}		
 		c.indent--;
 		c.print ("}");
diff -Naur ode-0.5/ode/src/joint.cpp ode-0.5_lmotor/ode/src/joint.cpp
--- ode-0.5/ode/src/joint.cpp	2004-05-18 18:08:04.000000000 +0000
+++ ode-0.5_lmotor/ode/src/joint.cpp	2005-08-11 09:10:09.000000000 +0000
@@ -2575,6 +2575,153 @@
   dJointTypeAMotor};
 
 //****************************************************************************
+// lmotor joint
+static void lmotorInit (dxJointLMotor *j)
+{
+  int i;
+  j->num = 0;
+  for (i=0;i<3;i++) {
+    dSetZero(j->axis[i],4);
+    j->limot[i].init(j->world);
+  }
+}
+
+static void lmotorComputeGlobalAxes (dxJointLMotor *joint, dVector3 ax[3])
+{
+  for (int i=0; i< joint->num; i++) {
+    if (joint->rel[i] == 1) {
+	  dMULTIPLY0_331 (ax[i],joint->node[0].body->R,joint->axis[i]);
+	}
+	else if (joint->rel[i] == 2) {
+	  if (joint->node[1].body) {   // jds: don't assert, just ignore
+	    dMULTIPLY0_331 (ax[i],joint->node[1].body->R,joint->axis[i]);
+      } 
+	} else {
+	  ax[i][0] = joint->axis[i][0];
+      ax[i][1] = joint->axis[i][1];
+      ax[i][2] = joint->axis[i][2];
+	}
+  }
+}
+
+static void lmotorGetInfo1 (dxJointLMotor *j, dxJoint::Info1 *info) 
+{
+  info->m = 0;
+  info->nub = 0;
+  for (int i=0; i < j->num; i++) {
+    if (j->limot[i].fmax > 0) {
+      info->m++;
+    }
+  }
+}
+
+static void lmotorGetInfo2 (dxJointLMotor *joint, dxJoint::Info2 *info)
+{
+  int row=0;
+  dVector3 ax[3];
+  lmotorComputeGlobalAxes(joint, ax);
+ 
+  for (int i=0;i<joint->num;i++) {  	
+    row += joint->limot[i].addLimot(joint,info,row,ax[i], 0);
+  }	
+}
+
+extern "C" void dJointSetLMotorAxis (dxJointLMotor *joint, int anum, int rel,
+				     dReal x, dReal y, dReal z)
+{
+//for now we are ignoring rel!
+  dAASSERT(joint && anum >= 0 && anum <= 2 && rel >= 0 && rel <= 2);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  if (anum < 0) anum = 0;
+  if (anum > 2) anum = 2;
+
+  if (!joint->node[1].body && rel==2) rel = 1; //ref 1
+
+  joint->rel[anum] = rel;
+
+  dVector3 r;
+  r[0] = x;
+  r[1] = y;
+  r[2] = z;
+  r[3] = 0;
+  if (rel > 0) {
+    if (rel==1) {
+      dMULTIPLY1_331 (joint->axis[anum],joint->node[0].body->R,r);
+	} else {
+	  //second body has to exists thanks to ref 1 line	
+      dMULTIPLY1_331 (joint->axis[anum],joint->node[1].body->R,r);
+	}
+  } else {
+    joint->axis[anum][0] = r[0];
+    joint->axis[anum][1] = r[1];
+    joint->axis[anum][2] = r[2];
+  }
+
+  dNormalize3 (joint->axis[anum]);
+}
+
+extern "C" void dJointSetLMotorNumAxes (dxJointLMotor *joint, int num)
+{
+  dAASSERT(joint && num >= 0 && num <= 3);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  if (num < 0) num = 0;
+  if (num > 3) num = 3;
+  joint->num = num;
+}
+
+extern "C" void dJointSetLMotorParam (dxJointLMotor *joint, int parameter,
+				      dReal value)
+{
+  dAASSERT(joint);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  int anum = parameter >> 8;
+  if (anum < 0) anum = 0;
+  if (anum > 2) anum = 2;
+  parameter &= 0xff;
+  joint->limot[anum].set (parameter, value);
+}
+
+extern "C" int dJointGetLMotorNumAxes (dxJointLMotor *joint)
+{
+  dAASSERT(joint);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  return joint->num;
+}
+
+
+extern "C" void dJointGetLMotorAxis (dxJointLMotor *joint, int anum,
+				     dVector3 result)
+{
+  dAASSERT(joint && anum >= 0 && anum < 3);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  if (anum < 0) anum = 0;
+  if (anum > 2) anum = 2;
+  result[0] = joint->axis[anum][0];
+  result[1] = joint->axis[anum][1];
+  result[2] = joint->axis[anum][2];
+}
+
+extern "C" dReal dJointGetLMotorParam (dxJointLMotor *joint, int parameter)
+{
+  dAASSERT(joint);
+  dUASSERT(joint->vtable == &__dlmotor_vtable,"joint is not an lmotor");
+  int anum = parameter >> 8;
+  if (anum < 0) anum = 0;
+  if (anum > 2) anum = 2;
+  parameter &= 0xff;
+  return joint->limot[anum].get (parameter);
+}
+
+dxJoint::Vtable __dlmotor_vtable = {
+  sizeof(dxJointLMotor),
+	(dxJoint::init_fn*) lmotorInit,
+	(dxJoint::getInfo1_fn*) lmotorGetInfo1,
+	(dxJoint::getInfo2_fn*) lmotorGetInfo2,
+	dJointTypeLMotor
+};
+
+
+//****************************************************************************
 // fixed joint
 
 static void fixedInit (dxJointFixed *j)
diff -Naur ode-0.5/ode/src/joint.h ode-0.5_lmotor/ode/src/joint.h
--- ode-0.5/ode/src/joint.h	2004-05-19 05:30:34.000000000 +0000
+++ ode-0.5_lmotor/ode/src/joint.h	2005-08-11 09:10:13.000000000 +0000
@@ -246,6 +246,14 @@
 };
 extern struct dxJoint::Vtable __damotor_vtable;
 
+struct dxJointLMotor : public dxJoint {
+  int num;
+  int rel[3];
+  dVector3 axis[3];
+  dxJointLimitMotor limot[3];
+};
+
+extern struct dxJoint::Vtable __dlmotor_vtable;
 
 // fixed
 
diff -Naur ode-0.5/ode/src/ode.cpp ode-0.5_lmotor/ode/src/ode.cpp
--- ode-0.5/ode/src/ode.cpp	2004-05-26 01:14:25.000000000 +0000
+++ ode-0.5_lmotor/ode/src/ode.cpp	2005-08-11 09:10:17.000000000 +0000
@@ -964,6 +964,12 @@
 }
 
 
+dxJoint * dJointCreateLMotor (dWorldID w, dJointGroupID group)
+{
+  dAASSERT (w);
+  return createJoint (w,group,&__dlmotor_vtable);
+}
+
 void dJointDestroy (dxJoint *j)
 {
   dAASSERT (j);
