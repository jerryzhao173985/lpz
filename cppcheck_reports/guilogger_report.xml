<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.17.1"/>
    <errors>
        <error id="preprocessorErrorDirective" severity="error" msg="#error This development environment does not support pthreads or windows threads" verbose="#error This development environment does not support pthreads or windows threads">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/quickmp.h" line="338" column="0"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="267" column="5"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="372" column="6"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;IniFile&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;IniFile&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.h" line="45" column="3"/>
            <symbol>IniFile</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;IniSection&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;IniSection&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.h" line="89" column="3"/>
            <symbol>IniSection</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;_next==true&apos; is always true" verbose="Condition &apos;_next==true&apos; is always true" cwe="571" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="236" column="29" info="Condition &apos;_next==true&apos; is always true"/>
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="236" column="12" info="Assuming that condition &apos;_next==false&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;len&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;len&apos; is reassigned a value before the old one has been used." cwe="563" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="151" column="8" info="len is overwritten"/>
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="148" column="8" info="len is assigned"/>
            <symbol>len</symbol>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;start&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;start&apos; is reassigned a value before the old one has been used." cwe="563" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="157" column="10" info="start is overwritten"/>
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="150" column="10" info="start is assigned"/>
            <symbol>start</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;start&apos; is assigned a value that is never used." verbose="Variable &apos;start&apos; is assigned a value that is never used." cwe="563" file0="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/inifile.cpp" line="147" column="14"/>
            <symbol>start</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;QPipeReader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;QPipeReader&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qpipereader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qpipereader.h" line="40" column="5"/>
            <symbol>QPipeReader</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qpipereader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qpipereader.cpp" line="41" column="13"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;port&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;port&apos; a value by passing the value to the constructor in the initialization list." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp" line="40" column="6"/>
            <symbol>port</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;QSerialReader&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;QSerialReader&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.h" line="42" column="5"/>
            <symbol>QSerialReader</symbol>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;s&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;s&apos; nulled but not freed upon failure" cwe="401" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp" line="94" column="9"/>
            <symbol>s</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp">
            <location file="/Users/jerry/lpzrobot_mac/guilogger/src/qserialreader.cpp" line="94" column="13"/>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: There was critical errors (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: There was critical errors (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
