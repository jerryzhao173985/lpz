wiredcontroller.h:63:3: style: Class 'WiredController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
wiredcontroller.h:67:3: style: Class 'WiredController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
agent.h:57:3: style: Class 'Agent' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
agent.h:61:3: style: Class 'Agent' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
abstractrobot.h:55:12: style: The destructor '~AbstractRobot' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
abstractrobot.h:78:23: style: The function 'getTrackableName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
agent.cpp:71:19: style: C-style pointer casting [cstyleCast]
agent.cpp:72:19: style: C-style pointer casting [cstyleCast]
controller/abstractcontroller.cpp:50:15: style: Variable 'i' can be declared as reference to const [constVariableReference]
controller/abstractcontroller.cpp:65:15: style: Variable 'i' can be declared as reference to const [constVariableReference]
controller/abstractiafcontroller.cpp:25:24: warning: Member variable 'AbstractIAFController::randG' is not initialized in the constructor. [uninitMemberVar]
controller/abstractiafcontroller.cpp:25:24: warning: Member variable 'AbstractIAFController::sensorNumber' is not initialized in the constructor. [uninitMemberVar]
controller/abstractiafcontroller.cpp:25:24: warning: Member variable 'AbstractIAFController::motorNumber' is not initialized in the constructor. [uninitMemberVar]
controller/abstractiafcontroller.h:72:3: style: Class 'AbstractIAFController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/abstractiafcontroller.h:95:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractiafcontroller.h:97:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractiafcontroller.h:99:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractiafcontroller.h:32:16: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:33:16: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:34:11: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:35:11: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:36:22: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:37:17: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:38:17: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:39:30: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:40:31: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:148:18: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:164:20: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:175:21: style: C-style pointer casting [cstyleCast]
controller/abstractiafcontroller.h:182:18: style: C-style pointer casting [cstyleCast]
controller/abstractcontrolleradapter.h:80:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractcontrolleradapter.h:86:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractcontrolleradapter.h:90:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:47:18: style: The destructor '~AbstractMultiController' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:77:22: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:86:22: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:92:22: style: The function 'stepNoLearning' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:127:22: style: The function 'store' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:131:22: style: The function 'restore' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/abstractmulticontroller.h:127:22: style: The function 'store' overrides a function in a base class but is identical to the overridden function [uselessOverride]
controller/abstractmulticontroller.h:131:22: style: The function 'restore' overrides a function in a base class but is identical to the overridden function [uselessOverride]
controller/abstractmulticontroller.cpp:48:104: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/layer.h:39:3: style: Class 'Layer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/controllernet.h:42:3: style: Class 'ControllerNet' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/invertablemodel.h:39:12: style: The destructor '~InvertableModel' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/feedforwardnn.h:47:12: style: The destructor '~FeedForwardNN' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/feedforwardnn.h:50:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/controllernet.cpp:476:12: warning: %i in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
controller/controllernet.cpp:492:12: warning: %i in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
controller/regularisation.h:137:21: style: C-style pointer casting [cstyleCast]
controller/controllernet.cpp:112:24: style: Unsigned expression 'injectInLayer' can't be negative so it is unnecessary to test it. [unsignedPositive]
controller/controllernet.cpp:66:12: style: Local variable 'w' shadows outer variable [shadowVariable]
controller/crossmotorcoupling.h:60:12: style: C-style pointer casting [cstyleCast]
controller/dep.cpp:83:16: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
controller/dep.h:76:3: style: Class 'DEP' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/dep.cpp:44:36: style: C-style pointer casting [cstyleCast]
controller/dep.cpp:255:21: style: Local variable 'L' shadows outer variable [shadowVariable]
controller/dep.cpp:47:64: performance: Function parameter 'a' should be passed by const reference. [passedByValue]
controller/dep.cpp:83:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/invertmotornstep.h:212:12: warning: The class 'InvertMotorNStep' defines member variable with name 'noiseY' also defined in its parent class 'InvertMotorController'. [duplInheritedMember]
controller/derbigcontroller.h:57:3: style: Class 'DerBigController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/invertmotornstep.h:58:3: style: Class 'InvertMotorNStep' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/derbigcontroller.h:58:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derbigcontroller.h:63:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derbigcontroller.h:65:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:60:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:62:12: style: The destructor '~InvertMotorNStep' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:65:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:67:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:111:16: style: The function 'setMotorTeaching' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:118:16: style: The function 'setSensorTeaching' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:120:26: style: The function 'getLastMotorValues' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotornstep.h:122:26: style: The function 'getLastSensorValues' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derbigcontroller.cpp:250:19: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/derbigcontroller.cpp:339:21: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::xsi_norm' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::xsi_norm_avg' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::pain' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::x_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::y_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.cpp:32:16: warning: Member variable 'DerController::eta_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/dercontroller.h:56:3: style: Class 'DerController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/dercontroller.h:57:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/dercontroller.h:62:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/dercontroller.h:64:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/dercontroller.h:181:18: style: The function 'calcErrorFactor' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/dercontroller.cpp:341:19: style: Local variable 'AAT' shadows outer variable [shadowVariable]
controller/derinf.h:52:3: style: Class 'DerInf' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/multilayerffnn.h:46:12: style: The destructor '~MultiLayerFFNN' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:54:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:58:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:62:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:74:32: style: The function 'response' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:83:32: style: The function 'inversion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:87:24: style: The function 'getInputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:91:24: style: The function 'getOutputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/multilayerffnn.h:102:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derinf.h:53:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derinf.h:58:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derinf.h:60:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derinf.cpp:101:11: style: Variable 'randg' is assigned a value that is never used. [unreadVariable]
controller/derlininvert.h:58:3: style: Class 'DerLinInvert' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/derlininvert.h:59:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlininvert.h:64:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlininvert.h:66:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlininvert.cpp:361:20: style: Local variable 'mue1' shadows outer variable [shadowVariable]
controller/derlininvert.cpp:75:11: style: Variable 'randg' is assigned a value that is never used. [unreadVariable]
controller/derlinunivers.cpp:33:16: warning: Member variable 'DerLinUnivers::x_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/derlinunivers.cpp:33:16: warning: Member variable 'DerLinUnivers::y_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/derlinunivers.cpp:33:16: warning: Member variable 'DerLinUnivers::v_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/elman.h:116:8: warning: The class 'Elman' defines member function with name 'store' also defined in its parent class 'MultiLayerFFNN'. [duplInheritedMember]
controller/elman.h:118:8: warning: The class 'Elman' defines member function with name 'restore' also defined in its parent class 'MultiLayerFFNN'. [duplInheritedMember]
controller/derlinunivers.h:73:3: style: Class 'DerLinUnivers' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/elman.h:72:12: style: The destructor '~Elman' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:75:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:81:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:84:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:112:8: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:129:25: style: The function 'getInternalParamNames' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:130:25: style: The function 'getInternalParams' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:131:22: style: The function 'getStructuralLayers' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/elman.h:132:27: style: The function 'getStructuralConnections' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlinunivers.h:100:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlinunivers.h:102:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlinunivers.h:104:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derlinunivers.cpp:62:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/derpseudosensor.h:61:3: style: Class 'DerPseudoSensor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/derpseudosensor.h:62:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derpseudosensor.h:67:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derpseudosensor.h:69:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/derpseudosensor.cpp:389:19: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/derpseudosensor.cpp:392:19: style: Local variable 'delta' shadows outer variable [shadowVariable]
controller/discretecontrolleradapter.h:58:14: style: The destructor '~DiscreteControllerAdapter' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/discretecontrolleradapter.h:139:16: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/discretecontrolleradapter.h:144:16: style: The function 'stepNoLearning' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/discretecontrolleradapter.h:150:22: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/discretecontrolleradapter.cpp:140:27: style: C-style pointer casting [cstyleCast]
controller/elman.cpp:245:13: warning: The class 'Elman' defines member function with name 'store' also defined in its parent class 'MultiLayerFFNN'. [duplInheritedMember]
controller/elman.cpp:260:13: warning: The class 'Elman' defines member function with name 'restore' also defined in its parent class 'MultiLayerFFNN'. [duplInheritedMember]
controller/elman.cpp:321:6: style: The if condition is the same as the previous if condition [duplicateCondition]
controller/elman.cpp:183:15: style: Local variable 'k' shadows outer variable [shadowVariable]
controller/esn.cpp:35:6: warning: Member variable 'ESN::nbInputs' is not initialized in the constructor. [uninitMemberVar]
controller/esn.cpp:35:6: warning: Member variable 'ESN::nbOutputs' is not initialized in the constructor. [uninitMemberVar]
controller/esn.h:59:3: style: Class 'ESN' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/ffnncontroller.h:51:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/ffnncontroller.h:56:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/ffnncontroller.h:58:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorbigmodel.h:57:3: style: Class 'InvertMotorBigModel' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/invertmotorbigmodel.h:58:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorbigmodel.h:63:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorbigmodel.h:65:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorbigmodel.cpp:247:21: style: Local variable 'xsi' shadows outer variable [shadowVariable]
  matrix::Matrix xsi; ///< current output error
controller/invertmotornstep.cpp:26:19: warning: Member variable 'InvertMotorNStep::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/invertmotornstep.cpp:26:19: warning: Member variable 'InvertMotorNStep::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/invertmotornstep.cpp:26:19: warning: Member variable 'InvertMotorNStep::t_rand' is not initialized in the constructor. [uninitMemberVar]
controller/invertmotornstep.cpp:410:21: style: Local variable 'xsi' shadows outer variable [shadowVariable]
  matrix::Matrix xsi; ///< current output error
controller/invertmotornstep.cpp:425:21: style: Local variable 'xsi' shadows outer variable [shadowVariable]
  matrix::Matrix xsi; ///< current output error
controller/invertmotornstep.cpp:470:16: style: Local variable 'v' shadows outer variable [shadowVariable]
  matrix::Matrix v;   ///< current reconstructed error
controller/invertmotorspace.cpp:25:19: warning: Member variable 'InvertMotorSpace::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/invertmotorspace.cpp:25:19: warning: Member variable 'InvertMotorSpace::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/invertmotorspace.h:39:3: style: Class 'InvertMotorSpace' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/invertmotorspace.h:40:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorspace.h:45:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorspace.h:47:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertmotorspace.cpp:54:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/invertnchannelcontroller.cpp:26:27: warning: Member variable 'InvertNChannelController::number_channels' is not initialized in the constructor. [uninitMemberVar]
controller/invertnchannelcontroller.h:41:3: style: Class 'InvertNChannelController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/invertnchannelcontroller.h:42:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertnchannelcontroller.h:49:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertnchannelcontroller.h:51:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/invertnchannelcontroller.cpp:46:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/layer.cpp:85:12: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
controller/measureadapter.cpp:27:17: warning: Member variable 'MeasureAdapter::initialized' is not initialized in the constructor. [uninitMemberVar]
controller/measureadapter.cpp:27:17: warning: Member variable 'MeasureAdapter::motorValues' is not initialized in the constructor. [uninitMemberVar]
controller/measureadapter.cpp:27:17: warning: Member variable 'MeasureAdapter::sensorValues' is not initialized in the constructor. [uninitMemberVar]
controller/measureadapter.h:49:3: style: Class 'MeasureAdapter' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/measureadapter.h:51:12: style: The destructor '~MeasureAdapter' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/measureadapter.h:68:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/measureadapter.h:77:16: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/measureadapter.h:83:16: style: The function 'stepNoLearning' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/measureadapter.cpp:78:23: style: C-style pointer casting [cstyleCast]
controller/measureadapter.cpp:79:24: style: C-style pointer casting [cstyleCast]
controller/modelwithmemoryadapter.h:40:12: style: The destructor '~ModelWithMemoryAdapter' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:42:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:49:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:55:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:59:32: style: The function 'response' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:63:32: style: The function 'inversion' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:67:24: style: The function 'getInputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:70:24: style: The function 'getOutputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/modelwithmemoryadapter.h:73:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/motorbabbler.h:43:3: style: Class 'MotorBabbler' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/multilayerffnn.cpp:251:12: warning: %i in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
controller/multilayerffnn.cpp:267:12: warning: %i in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
controller/multilayerffnn.cpp:68:12: style: Local variable 'w' shadows outer variable [shadowVariable]
controller/multilayerffnn.cpp:180:19: style: Local variable 'g_prime' shadows outer variable [shadowVariable]
controller/multilayerffnn.cpp:184:19: style: Local variable 'g_prime' shadows outer variable [shadowVariable]
controller/multilayerffnn.cpp:360:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/multireinforce.cpp:415:9: style: The scope of the variable 'file' can be reduced. [variableScope]
controller/multireinforce.cpp:433:9: style: The scope of the variable 'file' can be reduced. [variableScope]
controller/mutualinformationcontroller.cpp:251:51: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
controller/mutualinformationcontroller.cpp:252:16: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::sensorNumber' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::motorNumber' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::oldSensorStates' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::MI' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::H_x' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::H_yx' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::H_Xsi' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::ainit' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.cpp:33:30: warning: Member variable 'MutualInformationController::cinit' is not initialized in the constructor. [uninitMemberVar]
controller/mutualinformationcontroller.h:53:3: style: Class 'MutualInformationController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/mutualinformationcontroller.h:100:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/mutualinformationcontroller.h:104:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/mutualinformationcontroller.h:108:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/mutualinformationcontroller.cpp:101:27: style: C-style pointer casting [cstyleCast]
controller/mutualinformationcontroller.cpp:103:14: style: C-style pointer casting [cstyleCast]
controller/mutualinformationcontroller.cpp:105:15: style: C-style pointer casting [cstyleCast]
controller/mutualinformationcontroller.cpp:107:16: style: C-style pointer casting [cstyleCast]
controller/mutualinformationcontroller.cpp:127:19: style: C-style pointer casting [cstyleCast]
controller/mutualinformationcontroller.cpp:280:11: style: Redundant initialization for 'xsi'. The initialized value is overwritten before it is read. [redundantInitialization]
controller/mutualinformationcontroller.cpp:275:7: style: The scope of the variable 'state' can be reduced. [variableScope]
controller/mutualinformationcontroller.cpp:254:12: style: Local variable 't' shadows outer variable [shadowVariable]
controller/mutualinformationcontroller.cpp:162:113: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:184:5: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:198:113: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:239:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:276:119: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:297:101: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:311:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:327:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/mutualinformationcontroller.cpp:352:95: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/neuralgas.cpp:33:12: warning: Member variable 'NeuralGas::maxTime' is not initialized in the constructor. [uninitMemberVar]
controller/neuralgas.h:38:3: style: Class 'NeuralGas' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/neuralgas.h:47:12: style: The destructor '~NeuralGas' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:55:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:58:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:65:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:69:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:71:24: style: The function 'getInputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.h:72:24: style: The function 'getOutputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/neuralgas.cpp:155:3: warning: %i in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
controller/neuralgas.cpp:76:11: style: C-style pointer casting [cstyleCast]
controller/old_stuff/dersimple.h:57:3: style: Class 'DerSimple' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/old_stuff/dersimple.cpp:247:19: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/old_stuff/dersimple.cpp:289:21: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/oneactivemultipassivecontroller.cpp:29:34: warning: Member variable 'OneActiveMultiPassiveController::passiveMotors' is not initialized in the constructor. [uninitMemberVar]
controller/oneactivemultipassivecontroller.h:39:9: style: Class 'OneActiveMultiPassiveController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/oneactivemultipassivecontroller.h:41:18: style: The destructor '~OneActiveMultiPassiveController' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/oneactivemultipassivecontroller.h:58:22: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/oneactivemultipassivecontroller.h:68:22: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/oneactivemultipassivecontroller.h:74:22: style: The function 'stepNoLearning' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/oneactivemultipassivecontroller.cpp:49:31: style: C-style pointer casting [cstyleCast]
controller/oneactivemultipassivecontroller.cpp:58:107: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/oneactivemultipassivecontroller.cpp:68:107: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/onecontrollerperchannel.cpp:30:26: warning: Member variable 'OneControllerPerChannel::motornumber' is not initialized in the constructor. [uninitMemberVar]
controller/onecontrollerperchannel.cpp:30:26: warning: Member variable 'OneControllerPerChannel::sensornumber' is not initialized in the constructor. [uninitMemberVar]
controller/onelayerffnn.h:15:3: style: Class 'OneLayerFFNN' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/onelayerffnn.h:43:12: style: The destructor '~OneLayerFFNN' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:50:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:53:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:55:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:60:24: style: The function 'getInputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:64:24: style: The function 'getOutputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/onelayerffnn.h:72:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/pimax.cpp:24:8: warning: Member variable 'PiMax::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/pimax.cpp:24:8: warning: Member variable 'PiMax::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/pimax.h:64:3: style: Class 'PiMax' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/pimax.cpp:234:17: style: Local variable 's' shadows outer variable [shadowVariable]
controller/pimax.cpp:77:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/qlearning.cpp:217:83: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
controller/semox.cpp:188:7: style: Boolean value assigned to floating point variable. [assignBoolToFloat]
  pain= xsi_norm > 5*xsi_norm_avg; // pain if large raise in error (arbitrary choice)
controller/semox.h:60:3: style: Class 'SeMoX' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/semox.cpp:256:21: style: Local variable 'xsi' shadows outer variable [shadowVariable]
  matrix::Matrix xsi; ///< current output error
controller/sinecontroller.cpp:33:17: warning: Member variable 'SineController::individual' is not initialized in the constructor. [uninitMemberVar]
controller/sinecontroller.cpp:118:22: warning: Member variable 'MultiSineController::periods' is not initialized in the constructor. [uninitMemberVar]
controller/sinecontroller.cpp:118:22: warning: Member variable 'MultiSineController::phaseShifts' is not initialized in the constructor. [uninitMemberVar]
controller/sinecontroller.cpp:118:22: warning: Member variable 'MultiSineController::amplitudes' is not initialized in the constructor. [uninitMemberVar]
controller/sinecontroller.cpp:118:22: warning: Member variable 'MultiSineController::offsets' is not initialized in the constructor. [uninitMemberVar]
controller/sinecontroller.h:45:3: style: Class 'SineController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/sinecontroller.h:116:3: style: Class 'MultiSineController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/sinecontroller.h:50:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/sinecontroller.h:54:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/sinecontroller.h:59:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/sinecontroller.h:117:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/sinecontroller.h:118:16: style: The function 'stepNoLearning' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:41:3: style: Class 'SOM' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/som.h:50:12: style: The destructor '~SOM' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:58:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:61:32: style: The function 'process' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:68:32: style: The function 'learn' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:72:16: style: The function 'damp' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:74:24: style: The function 'getInputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.h:75:24: style: The function 'getOutputDim' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/som.cpp:202:3: warning: %i in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
controller/som.cpp:87:22: style: C-style pointer casting [cstyleCast]
controller/som.cpp:156:11: style: C-style pointer casting [cstyleCast]
controller/soml.cpp:25:7: warning: Member variable 'SoML::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/soml.cpp:25:7: warning: Member variable 'SoML::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/soml.cpp:25:7: warning: Member variable 'SoML::numControllerLayer' is not initialized in the constructor. [uninitMemberVar]
controller/soml.cpp:25:7: warning: Member variable 'SoML::E' is not initialized in the constructor. [uninitMemberVar]
controller/soml.h:52:3: style: Class 'SoML' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/soml.cpp:199:19: style: Local variable 'y' shadows outer argument [shadowArgument]
controller/sos.cpp:24:6: warning: Member variable 'Sos::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/sos.cpp:24:6: warning: Member variable 'Sos::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/sos.h:37:3: style: Class 'Sos' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/sos.cpp:156:17: style: Local variable 'x' shadows outer variable [shadowVariable]
controller/sos.cpp:51:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/sox.h:60:3: style: Class 'Sox' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/sox.h:63:3: style: Class 'Sox' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/sox.cpp:263:17: style: Local variable 'x' shadows outer variable [shadowVariable]
controller/sox.cpp:315:21: style: Local variable 'y' shadows outer variable [shadowVariable]
controller/sox.cpp:97:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/soxexpand.h:49:3: style: Class 'SoxExpand' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/soxexpand.cpp:195:17: style: Local variable 'x' shadows outer variable [shadowVariable]
controller/soxexpand.cpp:62:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/splitcontrol.cpp:30:15: warning: Member variable 'SplitControl::motornumber' is not initialized in the constructor. [uninitMemberVar]
controller/splitcontrol.cpp:30:15: warning: Member variable 'SplitControl::sensornumber' is not initialized in the constructor. [uninitMemberVar]
controller/splitcontrol.cpp:30:15: warning: Member variable 'SplitControl::sensorbuffer' is not initialized in the constructor. [uninitMemberVar]
controller/splitcontrol.cpp:30:15: warning: Member variable 'SplitControl::motorbuffer' is not initialized in the constructor. [uninitMemberVar]
controller/switchcontroller.h:36:3: style: Class 'SwitchController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/switchcontroller.h:40:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/switchcontroller.h:46:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/switchcontroller.h:48:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/switchcontroller.cpp:51:18: style: C-style pointer casting [cstyleCast]
controller/switchcontroller.cpp:66:18: style: C-style pointer casting [cstyleCast]
controller/universalcontroller.cpp:33:22: warning: Member variable 'UniversalController::x_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/universalcontroller.cpp:33:22: warning: Member variable 'UniversalController::y_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/universalcontroller.cpp:33:22: warning: Member variable 'UniversalController::v_buffer' is not initialized in the constructor. [uninitMemberVar]
controller/universalcontroller.h:53:3: style: Class 'UniversalController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/universalcontroller.h:80:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/universalcontroller.h:82:15: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/universalcontroller.h:84:15: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/universalcontroller.cpp:62:24: style: Variable 'randGen' is assigned a value that is never used. [unreadVariable]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::number_sensors' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::number_motors' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::serverOK' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::anz_config_param' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::anz_internal_param' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::can_send' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::isFirst' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::isClosed' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::server_guilogger_isClosed' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::server_controller_isClosed' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::anzahl_closed_Server' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.cpp:37:22: warning: Member variable 'use_java_controller::motor_values_alt' is not initialized in the constructor. [uninitMemberVar]
controller/use_java_controller.h:75:17: style: Class 'use_java_controller' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
controller/use_java_controller.h:90:29: style: The function 'getSensorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/use_java_controller.h:95:29: style: The function 'getMotorNumber' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
controller/use_java_controller.cpp:113:1: error: Memory leak: port_iP [memleak]
controller/use_java_controller.cpp:46:21: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:81:44: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:83:48: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:99:59: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:107:67: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:160:21: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:294:28: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:329:21: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:330:21: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:530:40: style: C-style pointer casting [cstyleCast]
controller/use_java_controller.cpp:421:32: style: Variable 'motors' is assigned a value that is never used. [unreadVariable]
examples/feedforwardtest.cpp:307:6: style: Condition 'mltests' is always false [knownConditionTrueFalse]
examples/feedforwardtest.cpp:347:6: style: Condition 'somtests' is always false [knownConditionTrueFalse]
examples/feedforwardtest.cpp:356:6: style: Condition 'contrtests' is always true [knownConditionTrueFalse]
examples/integration/cmdline.cpp:12:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
examples/integration/cmdline.cpp:31:69: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
examples/integration/cmdline.cpp:41:58: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
examples/integration/cmdline.cpp:48:11: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
examples/integration/main.cpp:23:5: performance: Variable 'myparam' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
matrix/matrix.cpp:180:5: warning: %i in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
matrix/matrix.cpp:180:5: warning: %i in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
matrix/matrix.cpp:567:5: error: Common realloc mistake: 'data' nulled but not freed upon failure [memleakOnRealloc]
matrix/matrix.cpp:261:11: warning: If memory allocation fails, then there is a possible null pointer dereference: newdata [nullPointerOutOfMemory]
matrix/matrix.cpp:72:14: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:258:25: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:567:12: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:580:12: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:599:16: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:746:12: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:360:12: style: Local variable 'copy' shadows outer function [shadowFunction]
matrix/matrix.cpp:406:18: style: Local variable 'm' shadows outer variable [shadowVariable]
matrix/matrix.cpp:891:8: style: Variable 'p1' can be declared as pointer to const [constVariablePointer]
matrix/matrix.cpp:892:8: style: Variable 'p2' can be declared as pointer to const [constVariablePointer]
matrix/matrix.tests.hpp:178:0: error: failed to expand 'unit_assert', Wrong number of parameters for macro 'unit_assert'. [preprocessorErrorDirective]
matrix/matrix.cpp:92:21: style: C-style pointer casting [cstyleCast]
matrix/matrix.cpp:93:21: style: C-style pointer casting [cstyleCast]
matrix/matrixutils.cpp:126:27: style: Same expression on both sides of '=='. [duplicateExpression]
matrix/matrixutils.cpp:202:59: style: Parameter 'eigenvalues' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:203:42: style: Parameter 'eigenvectors' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:208:45: style: Parameter 'real' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:208:59: style: Parameter 'imag' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:213:52: style: Parameter 'vals_real' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:213:71: style: Parameter 'vals_imag' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:214:35: style: Parameter 'vecs_real' can be declared as reference to const [constParameterReference]
matrix/matrixutils.cpp:214:54: style: Parameter 'vecs_imag' can be declared as reference to const [constParameterReference]
simulations/dblcontingency/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/dblcontingency/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/dblcontingency/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/dblcontingency/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/dblcontingency/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/dblcontingency/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/dblcontingency/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/dblcontingency/main.cpp:35:5: performance: Variable 'pos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/dblcontingency/main.cpp:36:5: performance: Variable 'speed' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/dblcontingency/main.cpp:159:33: performance: Function parameter 'robots' should be passed by const reference. [passedByValue]
simulations/dblcontingency/main.cpp:100:32: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/dblcontingency_direct/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/dblcontingency_direct/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/dblcontingency_direct/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/dblcontingency_direct/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/dblcontingency_direct/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/dblcontingency_direct/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/dblcontingency_direct/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/dblcontingency_direct/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/dblcontingency_direct/main.cpp:128:33: performance: Function parameter 'robots' should be passed by const reference. [passedByValue]
simulations/dblcontingency_direct/main.cpp:192:7: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/flocks/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/flocks/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/interaction_sims/flocks/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/flocks/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/flocks/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/flocks/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/flocks/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/flocks/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/flocks/main.cpp:165:7: warning: Either the condition 'controller' is redundant or there is possible null pointer dereference: controller. [nullPointerRedundantCheck]
simulations/interaction_sims/flocks/main.cpp:270:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/flocks/main.cpp:273:14: style: Variable 'r' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/flocks/main.cpp:300:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/interaction/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/interaction_sims/interaction/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/interaction/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/interaction/main.cpp:59:5: performance: Variable 'pos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/interaction/main.cpp:60:5: performance: Variable 'speed' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/interaction/main.cpp:279:16: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction/main.cpp:246:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction/main.cpp:136:18: style: Local variable 'shadow' shadows outer variable [shadowVariable]
simulations/interaction_sims/interaction/main.cpp:193:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/interaction1D/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/interaction1D/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/interaction_sims/interaction1D/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction1D/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction1D/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction1D/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/interaction1D/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/interaction1D/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/interaction1D/main.cpp:307:16: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/interaction1D/main.cpp:287:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main.cpp:295:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main.cpp:307:12: style: Variable 'r' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/interaction1D/main.cpp:383:7: style: Variable 'bg' can be declared as const array [constVariable]
simulations/interaction_sims/interaction1D/main_pos_senor.cpp:145:6: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_pos_senor.cpp:251:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_pos_senor.cpp:260:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_pos_senor.cpp:195:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/interaction1D/main_pos_senor.cpp:276:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction1D/main_vision_2agents.cpp:276:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_vision_2agents.cpp:284:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_vision_2agents.cpp:295:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction1D/main_vision_2agents.cpp:366:7: style: Variable 'bg' can be declared as const array [constVariable]
simulations/interaction_sims/interaction1D/main_vision_4objects.cpp:242:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_vision_4objects.cpp:260:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction1D/main_vision_bg.cpp:208:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_vision_bg.cpp:219:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/interaction1D/main_vision_bg.cpp:290:7: style: Variable 'bg' can be declared as const array [constVariable]
simulations/interaction_sims/interaction1D/main_visual_motor.cpp:150:6: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_visual_motor.cpp:256:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_visual_motor.cpp:265:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/interaction1D/main_visual_motor.cpp:200:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/interaction1D/main_visual_motor.cpp:281:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/shadoworreal/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/shadoworreal/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/interaction_sims/shadoworreal/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/shadoworreal/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/shadoworreal/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/interaction_sims/shadoworreal/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/shadoworreal/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/interaction_sims/shadoworreal/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/interaction_sims/shadoworreal/main.cpp:61:5: performance: Variable 'pos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main.cpp:62:5: performance: Variable 'speed' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main.cpp:268:16: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/shadoworreal/main.cpp:242:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/shadoworreal/main.cpp:191:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/shadoworreal/main.cpp:268:12: style: Variable 'r' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:55:5: performance: Variable 'pos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:56:5: performance: Variable 'speed' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:239:16: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:219:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:172:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/shadoworreal/main_real_and_shadow.cpp:239:12: style: Variable 'r' can be declared as pointer to const [constVariablePointer]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:55:5: performance: Variable 'pos' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:56:5: performance: Variable 'speed' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:257:16: style: C-style pointer casting [cstyleCast]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:233:4: style: Variable 'k' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:185:12: style: Local variable 'x' shadows outer variable [shadowVariable]
simulations/interaction_sims/shadoworreal/main_real_and_shadow_and_static.cpp:257:12: style: Variable 'r' can be declared as pointer to const [constVariablePointer]
simulations/manipuexperts/cmdline.cpp:10:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/manipuexperts/console.cpp:153:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/manipuexperts/console.cpp:100:7: style: C-style pointer casting [cstyleCast]
simulations/manipuexperts/console.cpp:235:13: style: C-style pointer casting [cstyleCast]
simulations/manipuexperts/console.cpp:294:4: style: Variable 'i' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/manipuexperts/console.cpp:284:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:302:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:415:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:421:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:168:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/manipuexperts/console.cpp:170:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/manipuexperts/console.cpp:252:9: style: Variable 'name' can be declared as pointer to const [constVariablePointer]
simulations/manipuexperts/console.cpp:302:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:421:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:421:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/manipuexperts/console.cpp:462:24: style: Parameter 'caller' can be declared as pointer to const [constParameterPointer]
simulations/manipuexperts/console.cpp:462:38: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
simulations/manipuexperts/console.cpp:85:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/manipuexperts/main.cpp:43:3: warning: Member variable 'Sim::mep' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/main.cpp:43:3: warning: Member variable 'Sim::data_size' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/main.cpp:43:3: warning: Member variable 'Sim::t' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertsubopt.h:69:3: style: Class 'MultiExpertSubopt' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/manipuexperts/main.cpp:43:3: style: Class 'Sim' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/manipuexperts/main.cpp:62:13: warning: If memory allocation fails, then there is a possible null pointer dereference: filename [nullPointerOutOfMemory]
simulations/manipuexperts/main.cpp:238:40: style: Parameter 'plotoptions' can be declared as reference to const [constParameterReference]
simulations/manipuexperts/main.cpp:258:29: style: Parameter 'plotoptions' can be declared as reference to const [constParameterReference]
simulations/manipuexperts/main.cpp:269:9: style: Variable 'filename' can be declared as pointer to const [constVariablePointer]
simulations/manipuexperts/multiexpertpair.cpp:34:18: warning: Member variable 'MultiExpertPair::inputDim' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertpair.cpp:34:18: warning: Member variable 'MultiExpertPair::outputDim' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertpair.h:59:3: style: Class 'MultiExpertPair' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/manipuexperts/multiexpertpair.cpp:242:20: style: C-style pointer casting [cstyleCast]
simulations/manipuexperts/multiexpertpair.cpp:359:9: style: Checking if unsigned expression 'sats.size()' is less than zero. [unsignedLessThanZero]
simulations/manipuexperts/multiexpertsubopt.cpp:36:20: warning: Member variable 'MultiExpertSubopt::inputDim' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertsubopt.cpp:36:20: warning: Member variable 'MultiExpertSubopt::outputDim' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertsubopt.cpp:36:20: warning: Member variable 'MultiExpertSubopt::t' is not initialized in the constructor. [uninitMemberVar]
simulations/manipuexperts/multiexpertsubopt.cpp:165:31: style: C-style pointer casting [cstyleCast]
simulations/manipuexperts/multiexpertsubopt.cpp:298:9: style: Checking if unsigned expression 'sats.size()' is less than zero. [unsignedLessThanZero]
simulations/manipuexperts/multiexpertsubopt.cpp:165:26: style: Variable 'c' can be declared as pointer to const [constVariablePointer]
simulations/manipuexperts/multiexpertsubopt.cpp:151:11: warning: Unnecessary comparison of static strings. [staticStringCompare]
simulations/pendulum/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/pendulum/console.cpp:153:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/pendulum/console.cpp:100:7: style: C-style pointer casting [cstyleCast]
simulations/pendulum/console.cpp:235:13: style: C-style pointer casting [cstyleCast]
simulations/pendulum/console.cpp:294:4: style: Variable 'i' is reassigned a value before the old one has been used. [redundantAssignment]
simulations/pendulum/console.cpp:284:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:302:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:415:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:421:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:168:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/pendulum/console.cpp:170:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/pendulum/console.cpp:252:9: style: Variable 'name' can be declared as pointer to const [constVariablePointer]
simulations/pendulum/console.cpp:302:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:421:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:421:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/pendulum/console.cpp:462:24: style: Parameter 'caller' can be declared as pointer to const [constParameterPointer]
simulations/pendulum/console.cpp:462:38: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
simulations/pendulum/console.cpp:85:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/pendulum/main.cpp:30:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/pendulum/main_starttop.cpp:52:3: style: Class 'Pendulum' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/pendulum/main_starttop.cpp:83:29: style: C-style pointer casting [cstyleCast]
simulations/pendulum/main_starttop.cpp:188:28: style: Parameter 'robot' can be declared as pointer to const [constParameterPointer]
simulations/pendulum/main_starttop.cpp:223:23: style: Parameter 'a' can be declared as pointer to const [constParameterPointer]
simulations/simplesystems/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/simplesystems/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/simplesystems/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/simplesystems/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/simplesystems/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/simplesystems/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/simplesystems/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/simplesystems/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/simplesystems/main.cpp:108:13: style: Variable 'x_cur' can be declared as pointer to const [constVariablePointer]
simulations/spherical_xbee/commtest/main.cpp:24:18: style: Variable 'verboseMode' is assigned a value that is never used. [unreadVariable]
simulations/spherical_xbee/commtest/main.cpp:28:46: style: Variable 'verboseMode' is assigned a value that is never used. [unreadVariable]
simulations/spherical_xbee/commtest/main.cpp:29:47: style: Variable 'verboseMode' is assigned a value that is never used. [unreadVariable]
simulations/spherical_xbee/commtest/serial_unix.cpp:468:14: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/commtest/serial_unix.cpp:158:13: style: Local variable 'b' shadows outer variable [shadowVariable]
simulations/spherical_xbee/workstation/cmdline.cpp:10:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/spherical_xbee/workstation/cmdline.cpp:35:69: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/spherical_xbee/workstation/cmdline.cpp:46:58: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/spherical_xbee/workstation/cmdline.cpp:53:11: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/spherical_xbee/workstation/console.cpp:153:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/spherical_xbee/workstation/console.cpp:100:7: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/console.cpp:235:13: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/console.cpp:284:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:302:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:415:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:421:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:168:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/spherical_xbee/workstation/console.cpp:170:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/spherical_xbee/workstation/console.cpp:252:9: style: Variable 'name' can be declared as pointer to const [constVariablePointer]
simulations/spherical_xbee/workstation/console.cpp:302:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:421:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:421:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/spherical_xbee/workstation/console.cpp:462:24: style: Parameter 'caller' can be declared as pointer to const [constParameterPointer]
simulations/spherical_xbee/workstation/console.cpp:462:38: style: Parameter 'arg' can be declared as pointer to const [constParameterPointer]
simulations/spherical_xbee/workstation/console.cpp:85:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/spherical_xbee/workstation/main.cpp:36:3: warning: Member variable 'Xbee::numsensors' is not initialized in the constructor. [uninitMemberVar]
simulations/spherical_xbee/workstation/main.cpp:36:3: warning: Member variable 'Xbee::sensoroffset' is not initialized in the constructor. [uninitMemberVar]
simulations/spherical_xbee/workstation/main.cpp:36:3: warning: Member variable 'Xbee::nummotors' is not initialized in the constructor. [uninitMemberVar]
simulations/spherical_xbee/workstation/main.cpp:36:3: warning: Member variable 'Xbee::motoroffset' is not initialized in the constructor. [uninitMemberVar]
simulations/spherical_xbee/workstation/main.cpp:36:3: style: Struct 'Xbee' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/spherical_xbee/workstation/main.cpp:460:3: style: Class 'OurWiring' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/spherical_xbee/workstation/main.cpp:99:4: style: The destructor '~Communicator' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
simulations/spherical_xbee/workstation/main.cpp:180:16: style: The function 'Initialise' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
simulations/spherical_xbee/workstation/main.cpp:228:16: style: The function 'writeMotors_readSensors' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
simulations/spherical_xbee/workstation/main.cpp:322:16: style: The function 'loopCallback' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
simulations/spherical_xbee/workstation/main.cpp:341:13: style: Condition 'pause' is always true [knownConditionTrueFalse]
simulations/spherical_xbee/workstation/main.cpp:415:7: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/main.cpp:416:7: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/main.cpp:477:18: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/main.cpp:229:12: style: The scope of the variable 'len' can be reduced. [variableScope]
simulations/spherical_xbee/workstation/main.cpp:229:17: style: The scope of the variable 'offset' can be reduced. [variableScope]
simulations/spherical_xbee/workstation/main.cpp:229:25: style: The scope of the variable 'n' can be reduced. [variableScope]
simulations/spherical_xbee/workstation/main.cpp:241:16: style: Local variable 'i' shadows outer variable [shadowVariable]
simulations/spherical_xbee/workstation/main.cpp:301:16: style: Local variable 'i' shadows outer variable [shadowVariable]
simulations/spherical_xbee/workstation/serial_unix.cpp:195:14: style: C-style pointer casting [cstyleCast]
simulations/spherical_xbee/workstation/serial_unix.cpp:179:11: style: Local variable 'b' shadows outer variable [shadowVariable]
simulations/tcpcommunication/Socket.cpp:73:9: warning: Member variable 'Socket::_tcpClientSock' is not initialized in the constructor. [uninitMemberVar]
simulations/tcpcommunication/Socket.cpp:103:16: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:117:26: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:122:50: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:144:26: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:156:51: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:161:52: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:207:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:214:8: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:219:8: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:225:8: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:266:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:282:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:304:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:320:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:342:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:363:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:390:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:395:6: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:415:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:420:6: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:446:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:451:6: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:472:4: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:477:6: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/Socket.cpp:201:7: style: The scope of the variable 'r' can be reduced. [variableScope]
simulations/tcpcommunication/Socket.cpp:204:7: style: The scope of the variable 'toread' can be reduced. [variableScope]
simulations/tcpcommunication/Socket.cpp:88:40: performance: Function parameter 'host' should be passed by const reference. [passedByValue]
simulations/tcpcommunication/Socket.cpp:532:35: style: Parameter 'c' can be declared as pointer to const [constParameterPointer]
simulations/tcpcommunication/Socket.cpp:392:64: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/tcpcommunication/Socket.cpp:448:67: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/tcpcommunication/Socket.h:117:36: performance: Function parameter 'host' should be passed by const reference. [passedByValue]
simulations/tcpcommunication/cmdline.cpp:11:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/tcpcommunication/console.cpp:151:7: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
simulations/tcpcommunication/console.cpp:98:7: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/console.cpp:233:13: style: C-style pointer casting [cstyleCast]
simulations/tcpcommunication/console.cpp:282:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_list' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:300:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_show' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:413:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_quit' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:419:28: style: Parameter 'globalData' can be declared as reference to const. However it seems that 'com_help' is a callback function, if 'globalData' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:166:30: style: Parameter 'name' can be declared as pointer to const [constParameterPointer]
simulations/tcpcommunication/console.cpp:168:9: style: Variable 'p' can be declared as pointer to const [constVariablePointer]
simulations/tcpcommunication/console.cpp:300:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_show' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:419:46: style: Parameter 'line' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'line' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:419:58: style: Parameter 'arg' can be declared as pointer to const. However it seems that 'com_help' is a callback function, if 'arg' is declared with const you might also need to cast function pointer(s). [constParameterCallback]
simulations/tcpcommunication/console.cpp:83:84: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
simulations/tcpcommunication/tcpcontroller.h:47:3: style: Class 'TcpController' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
simulations/tcpcommunication/main.cpp:110:13: style: Variable 'x_cur' can be declared as pointer to const [constVariablePointer]
statistictools/dataanalysation/templatevalueanalysation.h:169:9: style: Class 'TemplateValueAnalysation' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
statistictools/dataanalysation/templatevalueanalysation.h:547:17: style: Struct 'TYPE_SAVE' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
statistictools/dataanalysation/templatevalueanalysation.h:444:27: style: Condition 'iter!=m_list.end()' is always true [knownConditionTrueFalse]
statistictools/dataanalysation/templatevalueanalysation.h:482:27: style: Condition 'iter!=m_list.end()' is always true [knownConditionTrueFalse]
statistictools/dataanalysation/templatevalueanalysation.h:380:30: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:406:30: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:431:30: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:438:32: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:465:30: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:476:32: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:510:30: warning: Possible dereference of an invalid iterator: iter [derefInvalidIterator]
statistictools/dataanalysation/templatevalueanalysation.h:186:70: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:207:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:225:21: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:262:36: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:266:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:294:36: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:298:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:325:36: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:329:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:381:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:407:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:413:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:432:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:439:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:445:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:471:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:477:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:488:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:511:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:521:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:527:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/dataanalysation/templatevalueanalysation.h:577:70: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/measure/complexmeasure.cpp:161:42: style: Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision. [unpreciseMathCall]
statistictools/measure/complexmeasure.cpp:35:17: warning: Member variable 'ComplexMeasure::fSize' is not initialized in the constructor. [uninitMemberVar]
statistictools/measure/complexmeasure.cpp:35:17: warning: Member variable 'ComplexMeasure::historyIndexNumber' is not initialized in the constructor. [uninitMemberVar]
statistictools/measure/complexmeasure.cpp:35:17: warning: Member variable 'ComplexMeasure::historyInterval' is not initialized in the constructor. [uninitMemberVar]
statistictools/measure/abstractmeasure.h:43:3: style: Class 'AbstractMeasure' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
statistictools/measure/abstractmeasure.h:46:12: style: The destructor '~AbstractMeasure' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:49:23: style: The function 'getName' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:51:18: style: The function 'getValue' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:53:19: style: The function 'getValueAddress' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:55:16: style: The function 'setStepSize' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:57:15: style: The function 'getStepSize' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/abstractmeasure.h:59:16: style: The function 'getActualStep' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/complexmeasure.h:76:14: style: The destructor '~ComplexMeasure' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/complexmeasure.h:82:18: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/complexmeasure.cpp:39:22: style: C-style pointer casting [cstyleCast]
statistictools/measure/complexmeasure.cpp:69:18: style: Unused variable: binList [unusedVariable]
statistictools/measure/complexmeasure.cpp:86:7: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
statistictools/measure/statisticmeasure.h:40:12: style: The destructor '~StatisticMeasure' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/statisticmeasure.h:42:16: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/statisticmeasure.cpp:58:26: style: C-style pointer casting [cstyleCast]
statistictools/measure/trackablemeasure.cpp:29:19: warning: Member variable 'TrackableMeasure::cmode' is not initialized in the constructor. [uninitMemberVar]
statistictools/measure/trackablemeasure.h:80:16: style: Virtual function 'addDimension' is called from constructor 'TrackableMeasure(std::list<Trackable*>trackableList,const char*measureName,ComplexMeasureMode cmode,std::list<Position>cornerPointList,short dimensions,int numberBins)' at line 33. Dynamic binding is not used. [virtualCallInConstructor]
statistictools/measure/trackablemeasure.h:80:16: style: Virtual function 'addDimension' is called from constructor 'TrackableMeasure(std::list<Trackable*>trackableList,const char*measureName,ComplexMeasureMode cmode,std::list<Position>cornerPointList,short dimensions,int numberBins)' at line 35. Dynamic binding is not used. [virtualCallInConstructor]
statistictools/measure/trackablemeasure.h:80:16: style: Virtual function 'addDimension' is called from constructor 'TrackableMeasure(std::list<Trackable*>trackableList,const char*measureName,ComplexMeasureMode cmode,std::list<Position>cornerPointList,short dimensions,int numberBins)' at line 37. Dynamic binding is not used. [virtualCallInConstructor]
statistictools/measure/trackablemeasure.h:70:16: style: The function 'step' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
statistictools/measure/trackablemeasure.cpp:29:58: performance: Function parameter 'trackableList' should be passed by const reference. [passedByValue]
statistictools/measure/trackablemeasure.cpp:29:143: performance: Function parameter 'cornerPointList' should be passed by const reference. [passedByValue]
statistictools/statistictools.h:48:3: style: Class 'StatisticTools' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
statistictools/statistictools.cpp:34:101: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
tests/configurabletest.cpp:104:1: error: There is an unknown macro here somewhere. Configuration is required. If UNIT_TEST_RUN is a macro then please configure it. [unknownMacro]
tests/unit_test.hpp:171:5: warning: %li in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
utils/quickmp.h:363:25: performance: Variable 'barrierEvent1' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
utils/quickmp.h:364:25: performance: Variable 'barrierEvent2' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
utils/quickmp.h:940:17: warning: Class 'ParallelTaskManager' does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s). [noCopyConstructor]
utils/quickmp.h:940:17: warning: Class 'ParallelTaskManager' does not have a operator= which is recommended since it has dynamic memory/resource allocation(s). [noOperatorEq]
utils/quickmp.h:546:41: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:115:5: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:116:5: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:117:5: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:119:7: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:120:7: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:121:7: style: C-style pointer casting [cstyleCast]
utils/backcaller.cpp:119:7: style: Local variable 'derefList' shadows outer variable [shadowVariable]
utils/backcaller.cpp:121:7: style: Local variable 'thisCaller' shadows outer variable [shadowVariable]
utils/quickmp.h:583:75: style: C-style pointer casting [cstyleCast]
utils/quickmp.h:1059:37: style: Local variable 'returnCode' shadows outer variable [shadowVariable]
utils/configurable.h:138:5: warning: Member variable 'Configurable::parent' is not initialized in the constructor. [uninitMemberVar]
utils/configurable.h:143:5: warning: Member variable 'Configurable::parent' is not initialized in the constructor. [uninitMemberVar]
utils/stl_adds.h:95:5: style: Struct 'join' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/configurable.h:127:9: style: Struct 'matchId' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/inspectable.h:107:3: style: Class 'Inspectable' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/inspectable.h:95:5: style: Struct 'matchName' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/configurable.h:156:14: style: The destructor '~Configurable' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/configurable.cpp:385:18: style: C-style pointer casting [cstyleCast]
utils/configurable.cpp:39:8: style: Local variable 'name' shadows outer variable [shadowVariable]
utils/configurable.cpp:54:8: style: Local variable 'name' shadows outer variable [shadowVariable]
utils/stl_adds.h:110:29: performance: Function parameter 'list' should be passed by const reference. [passedByValue]
utils/inspectable.h:95:27: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
utils/inspectable.h:97:28: performance: Function parameter 'l' should be passed by const reference. [passedByValue]
utils/configurable.h:132:39: style: Parameter 'c' can be declared as pointer to const [constParameterPointer]
utils/configurable.cpp:264:39: performance: Searching before insertion is not necessary. Instead of 'mapOfValBounds[key]=std::pair<double,double>(minBound,maxBound)' consider using 'mapOfValBounds.try_emplace(key, std::pair<double,double>(minBound,maxBound));'. [stlFindInsert]
utils/configurable.cpp:275:39: performance: Searching before insertion is not necessary. Instead of 'mapOfIntBounds[key]=std::pair<int,int>(minBound,maxBound)' consider using 'mapOfIntBounds.try_emplace(key, std::pair<int,int>(minBound,maxBound));'. [stlFindInsert]
utils/stl_adds.h:121:11: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
utils/configurablelist.h:41:14: style: The destructor '~ConfigurableList' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:215:3: warning: Member variable 'ColorNormalNoise::factor' is not initialized in the constructor. [uninitMemberVar]
utils/noisegenerator.h:165:3: style: Class 'ColorUniformNoise' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/noisegenerator.h:215:3: style: Class 'ColorNormalNoise' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/noisegenerator.h:121:12: style: The destructor '~NoNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:122:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:132:12: style: The destructor '~WhiteUniformNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:133:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:144:12: style: The destructor '~WhiteNormalNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:145:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:171:12: style: The destructor '~ColorUniformNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:172:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:180:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:190:16: style: The function 'add' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:222:12: style: The destructor '~ColorNormalNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:224:16: style: The function 'init' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:232:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:237:16: style: The function 'add' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:275:12: style: The destructor '~SineWhiteNoise' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:277:18: style: The function 'generate' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:285:16: style: The function 'add' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/noisegenerator.h:176:9: warning: If memory allocation fails, then there is a possible null pointer dereference: mean [nullPointerOutOfMemory]
utils/noisegenerator.h:228:9: warning: If memory allocation fails, then there is a possible null pointer dereference: mean [nullPointerOutOfMemory]
utils/noisegenerator.h:174:12: style: C-style pointer casting [cstyleCast]
utils/noisegenerator.h:226:12: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:18:18: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:33:17: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:44:15: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:48:17: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:148:26: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:155:24: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:198:26: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:214:26: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:229:10: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:236:22: style: C-style pointer casting [cstyleCast]
utils/controller_misc.cpp:17:20: style: Parameter 'c' can be declared as pointer to const [constParameterPointer]
utils/controller_misc.cpp:236:15: style: Variable 'seed' can be declared as pointer to const [constVariablePointer]
utils/discretisizer.h:56:5: style: Class 'Discretisizer' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/inspectable.cpp:30:14: warning: Member variable 'Inspectable::printParentName' is not initialized in the constructor. [uninitMemberVar]
utils/inspectableproxy.h:44:9: style: Class 'InspectableProxy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/inspectableproxy.h:68:9: style: Class 'InspectableProxy' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/inspectableproxy.h:49:18: style: The destructor '~InspectableProxy' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
utils/inspectableproxy.cpp:34:92: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/inspectableproxy.cpp:44:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/inspectableproxy.cpp:45:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/inspectableproxy.cpp:108:25: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/mediator.cpp:45:57: style: Parameter 'collegue' can be declared as pointer to const [constParameterPointer]
utils/mediator.cpp:63:67: style: Parameter 'collegue' can be declared as pointer to const [constParameterPointer]
utils/parametrizable.cpp:57:30: style: Parameter 'pld' can be declared as reference to const [constParameterReference]
utils/parametrizable.cpp:42:9: style: Consider using std::transform algorithm instead of a raw loop. [useStlAlgorithm]
utils/parametrizable.cpp:60:96: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/plotoption.h:102:16: style: Virtual function 'setFilter' is called from constructor 'PlotOption(PlotMode mode,int interval=1,std::string parameter=std::string()' at line 90. Dynamic binding is not used. [virtualCallInConstructor]
utils/plotoption.h:86:3: style: Class 'PlotOption' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/plotoption.h:112:5: style: Struct 'matchMode' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/plotoption.cpp:89:11: style: The if condition is the same as the previous if condition [duplicateCondition]
utils/plotoption.cpp:45:18: style: Local variable 't' shadows outer variable [shadowVariable]
utils/plotoption.h:86:60: performance: Function parameter 'parameter' should be passed by const reference. [passedByValue]
utils/plotoption.h:86:97: performance: Function parameter 'filter' should be passed by const reference. [passedByValue]
utils/plotoption.cpp:45:18: style: Variable 't' can be declared as pointer to const [constVariablePointer]
utils/plotoptionengine.h:62:16: style: Virtual function 'closePipes' is called from destructor '~PlotOptionEngine()' at line 52. Dynamic binding is not used. [virtualCallInConstructor]
utils/plotoptionengine.h:41:3: style: Class 'PlotOptionEngine' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/plotoptionengine.h:42:3: style: Class 'PlotOptionEngine' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/plotoptionengine.cpp:76:12: style: Local variable 't' shadows outer variable [shadowVariable]
utils/plotoptionengine.cpp:198:81: performance: Prefer prefix ++/-- operators for non-primitive types. [postfixOperator]
utils/randomgenerator.cpp:69:41: style: Condition '__drand48_iterate(xsubi,buffer)<0' is always false [knownConditionTrueFalse]
utils/trackrobots.h:68:3: warning: Member variable 'TrackRobot::enabledDuringVideo' is not initialized in the constructor. [uninitMemberVar]
utils/trackrobots.h:104:5: performance: Variable 'conf' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
utils/trackrobots.h:68:3: style: Class 'TrackRobot' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
utils/trackrobots.h:68:29: performance: Function parameter 'conf' should be passed by const reference. However it seems that 'TrackRobot' is a callback function. [passedByValueCallback]
wiredcontroller.cpp:101:19: style: C-style pointer casting [cstyleCast]
wiredcontroller.cpp:102:19: style: C-style pointer casting [cstyleCast]
wirings/abstractwiring.h:50:3: warning: Member variable 'AbstractWiring::noisenumber' is not initialized in the constructor. [uninitMemberVar]
wirings/abstractwiring.h:50:3: warning: Member variable 'AbstractWiring::randGen' is not initialized in the constructor. [uninitMemberVar]
wirings/abstractwiring.cpp:39:15: style: C-style pointer casting [cstyleCast]
wirings/abstractwiring.cpp:35:17: style: Variable 'noisenumber' is reassigned a value before the old one has been used. [redundantAssignment]
wirings/derivativewiring.cpp:30:19: warning: Member variable 'DerivativeWiring::sensorbuffer' is not initialized in the constructor. [uninitMemberVar]
wirings/derivativewiring.cpp:61:28: style: C-style pointer casting [cstyleCast]
wirings/derivativewiring.cpp:67:32: style: C-style pointer casting [cstyleCast]
wirings/derivativewiring.cpp:68:32: style: C-style pointer casting [cstyleCast]
wirings/derivativewiring.cpp:70:25: style: C-style pointer casting [cstyleCast]
wirings/derivativewiring.cpp:183:11: style: Variable 't' can be declared as pointer to const [constVariablePointer]
wirings/derivativewiring.cpp:184:11: style: Variable 'tmdelay' can be declared as pointer to const [constVariablePointer]
wirings/derivativewiring.cpp:192:11: style: Variable 't' can be declared as pointer to const [constVariablePointer]
wirings/derivativewiring.cpp:193:11: style: Variable 'tmdelay' can be declared as pointer to const [constVariablePointer]
wirings/derivativewiring.cpp:194:11: style: Variable 'tm2delay' can be declared as pointer to const [constVariablePointer]
wirings/feedbackwiring.h:55:3: style: Class 'FeedbackWiring' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
wirings/feedbackwiring.cpp:58:10: warning: If memory allocation fails, then there is a possible null pointer dereference: motors [nullPointerOutOfMemory]
wirings/feedbackwiring.cpp:57:15: style: C-style pointer casting [cstyleCast]
wirings/forceboostwiring.h:45:3: style: Class 'ForceBoostWiring' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
wirings/one2onewiring.h:40:3: style: Class 'One2OneWiring' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
wirings/one2onewiring.cpp:49:12: warning: If memory allocation fails, then there is a possible null pointer dereference: blindmotors [nullPointerOutOfMemory]
wirings/one2onewiring.cpp:48:19: style: C-style pointer casting [cstyleCast]
wirings/selectiveone2onewiring.h:45:12: style: The destructor '~select_firsthalf' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
wirings/selectiveone2onewiring.h:46:16: style: The function 'operator()' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
wirings/selectiveone2onewiring.h:51:12: style: The destructor '~select_from_to' overrides a destructor in a base class but is not marked with a 'override' specifier. [missingOverride]
wirings/selectiveone2onewiring.h:53:16: style: The function 'operator()' overrides a function in a base class but is not marked with a 'override' specifier. [missingOverride]
wirings/selectiveone2onewiring.h:45:12: style: The destructor '~select_firsthalf' overrides a destructor in a base class but is identical to the overridden function [uselessOverride]
wirings/wiringsequence.h:59:16: style: Virtual function 'addWiring' is called from constructor 'WiringSequence(AbstractWiring*w1,AbstractWiring*w2)' at line 40. Dynamic binding is not used. [virtualCallInConstructor]
wirings/wiringsequence.h:59:16: style: Virtual function 'addWiring' is called from constructor 'WiringSequence(AbstractWiring*w1,AbstractWiring*w2)' at line 41. Dynamic binding is not used. [virtualCallInConstructor]
wirings/wiringsequence.h:64:8: warning: The class 'WiringSequence' defines member variable with name 'initialised' also defined in its parent class 'AbstractWiring'. [duplInheritedMember]
wirings/wiringsequence.h:38:3: style: Class 'WiringSequence' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
simulations/dblcontingency/console.cpp:54:9: error: The one definition rule is violated, different classes/structs have the same name 'COMMAND' [ctuOneDefinitionRuleViolation]
controller/multireinforce.h:50:9: error: The one definition rule is violated, different classes/structs have the same name 'Sat' [ctuOneDefinitionRuleViolation]
simulations/dblcontingency/globaldata.h:38:1: error: The one definition rule is violated, different classes/structs have the same name 'GlobalData' [ctuOneDefinitionRuleViolation]
simulations/dblcontingency/console.cpp:54:9: error: The one definition rule is violated, different classes/structs have the same name 'COMMAND' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
simulations/dblcontingency/console.cpp:54:9: error: The one definition rule is violated, different classes/structs have the same name 'COMMAND' [ctuOneDefinitionRuleViolation]
examples/integration/main.cpp:19:1: error: The one definition rule is violated, different classes/structs have the same name 'MyRobot' [ctuOneDefinitionRuleViolation]
controller/abstractiafcontroller.h:147:0: style: The function 'toTristateWithProbability' is never used. [unusedFunction]
controller/abstractiafcontroller.h:156:0: style: The function 'toTristateWithThreshold' is never used. [unusedFunction]
controller/abstractiafcontroller.h:163:0: style: The function 'dampToZero' is never used. [unusedFunction]
controller/abstractiafcontroller.h:169:0: style: The function 'toZeroIfFired' is never used. [unusedFunction]
controller/crossmotorcoupling.cpp:58:0: style: The function 'getPermutationCMC' is never used. [unusedFunction]
controller/derbigcontroller.cpp:433:0: style: The function 'getLastMotors' is never used. [unusedFunction]
controller/dercontroller.cpp:183:0: style: The function 'regularizedInverse2' is never used. [unusedFunction]
controller/derlinunivers.h:87:0: style: The function 'getDefaultNetConf' is never used. [unusedFunction]
controller/invertmotornstep.cpp:455:0: style: The function 'calcCandHUpdatesTeaching' is never used. [unusedFunction]
controller/invertmotornstep.cpp:556:0: style: The function 'getLastSensors' is never used. [unusedFunction]
controller/invertmotornstep.cpp:563:0: style: The function 'setSensorWeights' is never used. [unusedFunction]
controller/invertmotornstep.h:154:0: style: The function 'getSensorWeights' is never used. [unusedFunction]
controller/invertmotornstep.h:156:0: style: The function 'getC' is never used. [unusedFunction]
controller/multireinforce.cpp:449:0: style: The function 'createFileList' is never used. [unusedFunction]
controller/qlearning.cpp:147:0: style: The function 'getActionValues' is never used. [unusedFunction]
controller/qlearning.cpp:202:0: style: The function 'valInCrossProd' is never used. [unusedFunction]
controller/qlearning.cpp:214:0: style: The function 'ConfInCrossProd' is never used. [unusedFunction]
controller/regularisation.h:57:0: style: The function 'g_s_inv' is never used. [unusedFunction]
controller/regularisation.h:74:0: style: The function 'g_s_soft' is never used. [unusedFunction]
controller/regularisation.h:89:0: style: The function 'g_ss_div_s_soft' is never used. [unusedFunction]
controller/regularisation.h:99:0: style: The function 'derive_g_s_inv_exact_clip' is never used. [unusedFunction]
controller/splitcontrol.h:44:0: style: The function 'addSensorIdx' is never used. [unusedFunction]
controller/splitcontrol.h:45:0: style: The function 'addMotorIdx' is never used. [unusedFunction]
examples/integration/cmdline.cpp:38:0: style: The function 'splitString' is never used. [unusedFunction]
matrix/matrix.cpp:136:0: style: The function 'columns' is never used. [unusedFunction]
matrix/matrix.cpp:533:0: style: The function 'map2P' is never used. [unusedFunction]
matrix/matrix.cpp:630:0: style: The function 'multcolwise' is never used. [unusedFunction]
matrix/matrix.cpp:671:0: style: The function 'elementProduct' is never used. [unusedFunction]
matrix/matrix.cpp:708:0: style: The function 'beside' is never used. [unusedFunction]
matrix/matrix.cpp:717:0: style: The function 'addRows' is never used. [unusedFunction]
matrix/matrix.cpp:736:0: style: The function 'removeRows' is never used. [unusedFunction]
matrix/matrix.cpp:741:0: style: The function 'removeColumns' is never used. [unusedFunction]
matrix/matrix.h:108:0: style: The function 'valDef0' is never used. [unusedFunction]
matrix/matrixutils.cpp:26:0: style: The function 'eigenValuesRealSym' is never used. [unusedFunction]
matrix/matrixutils.cpp:46:0: style: The function 'eigenValuesVectorsRealSym' is never used. [unusedFunction]
simulations/interaction_sims/interaction/main.cpp:180:0: style: The function 'tactilezigzag' is never used. [unusedFunction]
simulations/interaction_sims/interaction/main.cpp:196:0: style: The function 'tactilesteepsides' is never used. [unusedFunction]
simulations/interaction_sims/shadoworreal/main.cpp:197:0: style: The function 'tactilerect' is never used. [unusedFunction]
simulations/manipuexperts/main.cpp:158:0: style: The function 'calcPredPosFromSpeed' is never used. [unusedFunction]
simulations/manipuexperts/multiexpertsubopt.cpp:164:0: style: The function 'mindynamics' is never used. [unusedFunction]
simulations/simplesystems/main.cpp:229:0: style: The function 'initSO2' is never used. [unusedFunction]
simulations/spherical_xbee/commtest/serial_unix.cpp:62:0: style: The function 'readNByte' is never used. [unusedFunction]
simulations/spherical_xbee/commtest/serial_unix.h:135:0: style: The function 'comport' is never used. [unusedFunction]
simulations/spherical_xbee/commtest/serial_unix.h:137:0: style: The function 'baudrate' is never used. [unusedFunction]
simulations/tcpcommunication/Socket.cpp:57:0: style: The function '__printBytes' is never used. [unusedFunction]
statistictools/measure/complexmeasure.cpp:130:0: style: The function 'calculatePInf' is never used. [unusedFunction]
tests/unit_test.hpp:147:0: style: The function 'cputime' is never used. [unusedFunction]
tests/unit_test.hpp:166:0: style: The function 'print_cputime' is never used. [unusedFunction]
utils/configurable.cpp:196:0: style: The function 'copyParameters' is never used. [unusedFunction]
utils/controller_misc.cpp:17:0: style: The function 'power' is never used. [unusedFunction]
utils/controller_misc.cpp:47:0: style: The function 'toBinaryWithProbability' is never used. [unusedFunction]
utils/controller_misc.cpp:53:0: style: The function 'toBinaryWithThreshold' is never used. [unusedFunction]
utils/controller_misc.cpp:233:0: style: The function 'splitRandGen' is never used. [unusedFunction]
utils/controller_misc.cpp:253:0: style: The function 'matrixNormalized' is never used. [unusedFunction]
utils/controller_misc.cpp:371:0: style: The function 'convertArrayToList' is never used. [unusedFunction]
utils/controller_misc.cpp:383:0: style: The function 'getArrayNames' is never used. [unusedFunction]
utils/globaldatabase.cpp:39:0: style: The function 'createConfigurator' is never used. [unusedFunction]
utils/globaldatabase.cpp:45:0: style: The function 'isConfiguratorOpen' is never used. [unusedFunction]
utils/globaldatabase.cpp:49:0: style: The function 'removeConfigurator' is never used. [unusedFunction]
utils/inspectableproxy.cpp:64:0: style: The function 'replaceList' is never used. [unusedFunction]
utils/lyapunov.cpp:90:0: style: The function 'getLyapunovMatrix' is never used. [unusedFunction]
utils/lyapunov.cpp:100:0: style: The function 'getLyapunovExp' is never used. [unusedFunction]
utils/mediator.cpp:33:0: style: The function 'removeAllMediatorCollegues' is never used. [unusedFunction]
utils/mediator.cpp:63:0: style: The function 'getMediatorCollegueIndex' is never used. [unusedFunction]
utils/mediator.cpp:76:0: style: The function 'mediate' is never used. [unusedFunction]
utils/mediator.cpp:98:0: style: The function 'mediateToAllQMP' is never used. [unusedFunction]
utils/mediatorcollegue.cpp:39:0: style: The function 'informMediator' is never used. [unusedFunction]
utils/mediatorcollegue.cpp:46:0: style: The function 'setMediator' is never used. [unusedFunction]
utils/noisegenerator.h:297:0: style: The function 'setOmega' is never used. [unusedFunction]
utils/noisegenerator.h:300:0: style: The function 'setPhaseShift' is never used. [unusedFunction]
utils/parametrizable.cpp:46:0: style: The function 'mapPL' is never used. [unusedFunction]
utils/parametrizable.cpp:51:0: style: The function 'divCompPL' is never used. [unusedFunction]
utils/parametrizable.cpp:57:0: style: The function 'assignPL' is never used. [unusedFunction]
utils/parametrizable.cpp:64:0: style: The function 'addPL' is never used. [unusedFunction]
utils/parametrizable.cpp:68:0: style: The function 'subtractPL' is never used. [unusedFunction]
utils/parametrizable.cpp:72:0: style: The function 'scalePL' is never used. [unusedFunction]
utils/quickmp.h:595:0: style: The function 'getNumThreads' is never used. [unusedFunction]
utils/quickmp.h:607:0: style: The function 'getMaxThreads' is never used. [unusedFunction]
utils/quickmp.h:657:0: style: The function 'inParallel' is never used. [unusedFunction]
utils/quickmp.h:762:0: style: The function 'criticalSectionBegin' is never used. [unusedFunction]
utils/quickmp.h:809:0: style: The function 'criticalSectionEnd' is never used. [unusedFunction]
utils/quickmp.h:928:0: style: The function 'getPlatformThreadObjects' is never used. [unusedFunction]
utils/stl_adds.cpp:42:0: style: The function 'ftos' is never used. [unusedFunction]
utils/stl_adds.h:110:0: style: The function 'reduceList' is never used. [unusedFunction]
utils/stl_adds.h:118:0: style: The function 'mapList' is never used. [unusedFunction]
utils/storeable.cpp:27:0: style: The function 'storeToFile' is never used. [unusedFunction]
utils/storeable.cpp:35:0: style: The function 'restoreFromFile' is never used. [unusedFunction]
utils/trackrobots.h:122:0: style: The function 'isDisplayTrace' is never used. [unusedFunction]
wirings/copywiring.cpp:47:0: style: The function 'motorFromSensorAssignment' is never used. [unusedFunction]
wirings/derivativewiring.h:78:0: style: The function 'getDefaultConf1' is never used. [unusedFunction]
nofile:0:0: information: Active checkers: There was critical errors (use --checkers-report=<filename> to see details) [checkersReport]
